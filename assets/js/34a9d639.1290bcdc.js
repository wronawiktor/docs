"use strict";(self.webpackChunkgo_4_clouds=self.webpackChunkgo_4_clouds||[]).push([[18],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var l=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=l.createContext({}),p=function(e){var n=l.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return l.createElement(i.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},m=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,d=u["".concat(i,".").concat(m)]||u[m]||g[m]||a;return t?l.createElement(d,s(s({ref:n},c),{},{components:t})):l.createElement(d,s({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=m;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<a;p++)s[p]=t[p];return l.createElement.apply(null,s)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8858:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var l=t(7462),r=(t(7294),t(3905));const a={sidebar_position:12},s="Use an Ingress Controller",o={unversionedId:"kubernetes/ingress-controller",id:"kubernetes/ingress-controller",title:"Use an Ingress Controller",description:"Deploy the NGINX Ingress Controller",source:"@site/docs/kubernetes/ingress-controller.md",sourceDirName:"kubernetes",slug:"/kubernetes/ingress-controller",permalink:"/docs/kubernetes/ingress-controller",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Security concept",permalink:"/docs/kubernetes/security-rbac"},next:{title:"Install Load Balancer",permalink:"/docs/kubernetes/loadbalancer-installation"}},i={},p=[{value:"Deploy the NGINX Ingress Controller",id:"deploy-the-nginx-ingress-controller",level:2},{value:"Deploy a hello-world app",id:"deploy-a-hello-world-app",level:2},{value:"Install and use Certificate Manager",id:"install-and-use-certificate-manager",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,l.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"use-an-ingress-controller"},"Use an Ingress Controller"),(0,r.kt)("h2",{id:"deploy-the-nginx-ingress-controller"},"Deploy the NGINX Ingress Controller"),(0,r.kt)("p",null,"Note: ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.github.io/ingress-nginx/deploy"},"NGINX Ingress Controller")),(0,r.kt)("p",null,"Add a Helm chart repository with the Ingress NGINX"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\n")),(0,r.kt)("p",null,"Install the NGINX Ingress Controller:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm install --create-namespace --namespace ingress-nginx ingress-nginx ingress-nginx/ingress-nginx\n")),(0,r.kt)("p",null,"Update the NGINX Ingress Controller with ",(0,r.kt)("inlineCode",{parentName:"p"},"hostNetwork")," true:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm upgrade -n ingress-nginx ingress-nginx ingress-nginx/ingress-nginx --set controller.hostNetwork=true\n")),(0,r.kt)("p",null,"Verify the Ingress NGINX installation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get pods -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx\nhelm list -n ingress-nginx\n")),(0,r.kt)("p",null,"Check installed Ingress NGINX version"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"POD_NAME=$(kubectl get pods -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\nkubectl exec -n ingress-nginx -it $POD_NAME -- /nginx-ingress-controller --version\n")),(0,r.kt)("p",null,"Output should be similar to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"-------------------------------------------------------------------------------\nNGINX Ingress controller\n  Release:       v1.5.1\n  Build:         d003aae913cc25f375deb74f898c7f3c65c06f05\n  Repository:    https://github.com/kubernetes/ingress-nginx\n  nginx version: nginx/1.21.6\n\n-------------------------------------------------------------------------------\n")),(0,r.kt)("h2",{id:"deploy-a-hello-world-app"},"Deploy a hello-world app"),(0,r.kt)("p",null,"Create a new Namespace:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create namespace webapp\n")),(0,r.kt)("p",null,"Create a Deployment using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create deployment -n webapp hello-world --image=gcr.io/google-samples/hello-app:1.0 --replicas=3\n")),(0,r.kt)("p",null,"Expose the Deployment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl expose deployment -n webapp hello-world --type=ClusterIP --port=8080\n")),(0,r.kt)("p",null,"Verify if the Service is created and is available on a node port:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get service -n webapp hello-world\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NAME      TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\nweb       ClusterIP  10.104.133.249   <none>        8080/TCP         12m\n")),(0,r.kt)("p",null,"Create an Ingress resource:"),(0,r.kt)("p",null,"The following file is an Ingress resource that sends traffic to your Service via hello-world.nc."),(0,r.kt)("p",null,"Create the ingress-hello.yaml from the following file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="ingress-hello.yaml"',title:'"ingress-hello.yaml"'},'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-hello\n  namespace: webapp\nspec:\n  ingressClassName: "nginx"\n  rules:\n    - host: hello-world.nc\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: hello-world\n                port:\n                  number: 8080\n')),(0,r.kt)("p",null,"Create the Ingress resource by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f ingress-hello.yaml\n")),(0,r.kt)("p",null,"Verify on which node ingress-nginx is running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get pods -n ingress-nginx -o wide\n")),(0,r.kt)("p",null,"Use worker IP and then set /etc/hosts."),(0,r.kt)("p",null,"Add the following line to the bottom of the /etc/hosts file."),(0,r.kt)("p",null,"Note: The IP address displayed within the ingress list will be the internal IP."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"IP_ADDRESS hello-world.nc\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo bash -c 'echo \"IP_ADDRESS hello-world.nc\" >> /etc/hosts'\n")),(0,r.kt)("p",null,"Verify if the Ingress controller is directing traffic:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl http://hello-world.nc\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl --header 'Host: hello-world.nc' http://IP_ADDRESS\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Hello, world!\nVersion: 1.0.0\nHostname: hello-world-55b8c6998d-8k564\n")),(0,r.kt)("p",null,"Create a second Deployment using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create deployment -n webapp hello-world2 --image=gcr.io/google-samples/hello-app:2.0\n")),(0,r.kt)("p",null,"Expose the Deployment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl expose deployment -n webapp hello-world2 --port=8080 --type=ClusterIP\n")),(0,r.kt)("p",null,"Edit the existing ingress-hello.yaml and add the following lines:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"      - path: /v2\n        pathType: Prefix\n        backend:\n          service:\n            name: hello-world2\n            port:\n              number: 8080\n")),(0,r.kt)("p",null,"Apply the changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f ingress-hello.yaml\n")),(0,r.kt)("p",null,"Test Your Ingress by accessing the 1st version of the Hello World app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl http://hello-world.nc\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Hello, world!\nVersion: 1.0.0\nHostname: hello-world-55b8c6998d-8k564\n")),(0,r.kt)("p",null,"Access the 2nd version of the Hello World app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl http://hello-world.info/v2\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Hello, world!\nVersion: 2.0.0\nHostname: hello-world2-75cd47646f-t8cjk\n")),(0,r.kt)("h2",{id:"install-and-use-certificate-manager"},"Install and use Certificate Manager"),(0,r.kt)("p",null,"To secure HTTP connection to Ingress Controller we can use additional extension, which is ",(0,r.kt)("a",{parentName:"p",href:"https://cert-manager.io/"},"Certficate Manager")),(0,r.kt)("p",null,"Add a Helm chart repository with the Certificate Manager"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add jetstack https://charts.jetstack.io\nhelm repo update\n")),(0,r.kt)("p",null,"Check available Certificate Manager versions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm search repo jetstack/cert-manager -l\n")),(0,r.kt)("p",null,"Install the Certificate Manager:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm install --create-namespace --namespace cert-manager cert-manager jetstack/cert-manager\xa0 \\\n            --version v1.12.6 --set installCRDs=true\n")),(0,r.kt)("p",null,"Verify the Certificate Manager installation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm list -n cert-manager\nhelm status -n cert-manager cert-manager\nhelm history -n cert-manager cert-manager\n")),(0,r.kt)("p",null,"Check if the Certificate Manager pods are running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get pods -n cert-manager\n")),(0,r.kt)("p",null,"Create certificate Issuers for webapp application:"),(0,r.kt)("p",null,"We'll set up two issuers for Let's Encrypt in this example: staging and production"),(0,r.kt)("p",null,"The Let's Encrypt production issuer has very strict rate limits. When you're experimenting and learning, it can be very easy to hit those limits. Because of that risk, we'll start with the Let's Encrypt staging issuer, and once we're happy that it's working we'll switch to the production issuer."),(0,r.kt)("p",null,"Note that you'll see a warning about untrusted certificates from the staging issuer, but that's totally expected."),(0,r.kt)("p",null,"Create this definition locally and update the email address to your own. This email is required by Let's Encrypt and used to notify you of certificate expiration and updates."),(0,r.kt)("p",null,"To learn more about it, go to official ",(0,r.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/tutorials/acme/nginx-ingress/#step-6---configure-a-lets-encrypt-issuer"},"Certificate Manager documentation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="issuer-staging.yaml"',title:'"issuer-staging.yaml"'},"apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-staging\nspec:\n  acme:\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    email: example@your_domain.com\n    privateKeySecretRef:\n      name: letsencrypt-staging\n    solvers:\n    - http01:\n        ingress:\n          class: nginx\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="issuer-production.yaml"',title:'"issuer-production.yaml"'},"apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-production\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: example@your_domain.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx\n")),(0,r.kt)("p",null,"Apply Issuer manifests onto Kubernetes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f issuer-staging.yaml\nkubectl apply -f issuer-production.yaml\n")),(0,r.kt)("p",null,"Both of these issuers are configured to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP01")," challenge provider."),(0,r.kt)("p",null,"Check on the status of the clusterissuer after you create it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl describe -n webapp clusterissuer letsencrypt-staging\n")),(0,r.kt)("p",null,"Now we can tell Ingress NGINX to use Certificate Manager Issuer to secure communication:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="ingress-hello.yaml"',title:'"ingress-hello.yaml"'},'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-hello\n  namespace: webapp\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-staging\nspec:\n  ingressClassName: "nginx"\n  rules:\n    - host: web<LAB_ID>.go4clouds.net\n      http:\n        paths:\n          - path: /\n...\n\n  tls:\n    - hosts:\n      - web<LAB_ID>.go4clouds.net\n      secretName: web-go4clouds-net-tls\n')),(0,r.kt)("p",null,"Apply changes with Ingress to Kubernetes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f ingress-hello.yaml\n")),(0,r.kt)("p",null,"Now you should be able to open in your Web browser website ",(0,r.kt)("inlineCode",{parentName:"p"},"https://web<LAB_ID>.go4clouds.net")))}u.isMDXComponent=!0}}]);